#!/bin/bash

echo ""
echo "Updating repository:"
echo ""

C=1
N=7

print_step () {
  echo "  [$C/$N] $1"
  C=$((C+1))
}

cd /http

# try to import the key
gpg --import /private.key &> /dev/null
# if scucessful, KEY_ID is extracted
KEY_ID=$( gpg --quiet --import --import-options show-only /private.key 2> /dev/null | sed -n '2p' | sed "s/ //g"  )


print_step "Renaming .deb packages..."
dpkg-name ./debs/*.deb &> /dev/null

print_step "Building package index..."
apt-ftparchive packages ./ > Packages

print_step "Compressing package index..."
echo "    -> using zstd..."
zstd -T $(nproc) -q --format=zstd Packages > Packages.zst
echo "    -> using gzip..."
zstd -T $(nproc) -q --format=gzip Packages > Packages.gz
echo "    -> using xz..."
zstd -T $(nproc) -q --format=xz Packages > Packages.xz
echo "    -> using lzma..."
zstd -T $(nproc) -q --format=lzma Packages > Packages.lzma
echo "    -> using lz4..."
zstd -T $(nproc) -q --format=lz4 Packages > Packages.lz4

print_step "Building content index..."
apt-ftparchive contents ./ > Contents

print_step "Compressing content index..."
echo "    -> using zstd..."
zstd -T $(nproc) -q --format=zstd Contents > Contents.zst
echo "    -> using gzip..."
zstd -T $(nproc) -q --format=gzip Contents > Contents.gz
echo "    -> using xz..."
zstd -T $(nproc) -q --format=xz Contents > Contents.xz
echo "    -> using lzma..."
zstd -T $(nproc) -q --format=lzma Contents > Contents.lzma
echo "    -> using lz4..."
zstd -T $(nproc) -q --format=lz4 Contents > Contents.lz4

print_step "Creating release..."
apt-ftparchive  release  \
    -o APT::FTPArchive::Release::Suite="stable" \
    . > Release

print_step "Signing release (if key is present)..."
gpg --quiet --yes -abs -u $KEY_ID -o Release.gpg Release 2> /dev/null
gpg --quiet --yes --export $KEY_ID > public.gpg 2> /dev/null

echo ""
echo "Update finished."
echo ""
